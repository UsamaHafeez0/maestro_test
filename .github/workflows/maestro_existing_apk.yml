name: Maestro Tests on Existing APK

on:
    push:
      tags:
        - '*-TT'  

jobs:
  test:
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        
      # Install Maestro CLI
      - name: Install Maestro
        run: curl -Ls "https://get.maestro.mobile.dev" | bash 
        
      - name: Add Maestro to PATH
        run: echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      # Install Allure for reporting
      - name: Install Allure CLI
        run: npm install -g allure-commandline@2.24.1

      # Verify APK exists and check its integrity
      - name: Verify APK exists and integrity
        run: |
          if [ ! -f "maestro-flows/drops.apk" ]; then
            echo "Error: drops.apk not found in maestro-flows directory"
            exit 1
          fi
          echo "APK file size: $(ls -lh maestro-flows/drops.apk | awk '{print $5}')"
          # Check if APK is valid
          if ! aapt dump badging maestro-flows/drops.apk > /dev/null 2>&1; then
            echo "Warning: APK may be corrupted or invalid"
          else
            echo "APK appears to be valid"
          fi

      # Launch emulator and run Maestro tests
      - name: Run Emulator & Maestro Tests
        uses: reactivecircus/android-emulator-runner@v2
        continue-on-error: true  # Continue even if tests fail
        with:
          api-level: 29
          arch: x86_64
          target: google_apis
          profile: pixel_7
          disable-animations: true
          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -memory 2048 -cores 2
          avd-name: test-emulator
          force-avd-creation: true
          emulator-boot-timeout: 900
          script: |
            # Wait for emulator to be ready
            echo "Waiting for emulator to start..."
            adb wait-for-device
            
            # Wait longer for emulator to be fully booted
            echo "Waiting for emulator to fully boot..."
            timeout 300 bash -c 'until adb shell getprop sys.boot_completed | grep -q 1; do sleep 5; done'
            
            # Additional wait to ensure system is stable
            echo "Waiting additional time for system stability..."
            sleep 30
            
            # Check device status
            echo "Device status:"
            adb devices
            adb shell getprop | grep -E "(ro.build.version|sys.boot_completed)"
            
            # Clear any existing app data
            echo "Clearing any existing app data..."
            adb shell pm clear com.nizek.drops 2>/dev/null || true
            
            # Install APK with retry logic
            echo "Installing APK..."
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Install attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
              
              # Kill any existing ADB server and restart
              adb kill-server
              sleep 5
              adb start-server
              sleep 5
              adb wait-for-device
              
              # Try to install the APK
              if adb install -r -t maestro-flows/drops.apk; then
                echo "APK installed successfully!"
                break
              else
                echo "Install failed, attempt $((RETRY_COUNT + 1))"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Waiting before retry..."
                  sleep 30
                  
                  # Restart ADB and wait for device
                  adb kill-server
                  sleep 5
                  adb start-server
                  sleep 5
                  adb wait-for-device
                fi
              fi
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to install APK after $MAX_RETRIES attempts"
              exit 1
            fi
            
            # Verify installation
            echo "Verifying app installation..."
            if adb shell pm list packages | grep -q com.nizek.drops; then
              echo "App successfully installed"
            else
              echo "App installation verification failed"
              exit 1
            fi
            
            # Launch the app to ensure it's ready
            echo "Launching app..."
            adb shell monkey -p com.nizek.drops -c android.intent.category.LAUNCHER 1
            
            # Wait for app to start
            sleep 10
            
            # Create results directory
            mkdir -p allure-results
            
            # Run Maestro tests
            echo "Running Maestro tests..."
            maestro test --format junit --output allure-results/$(date +%s).xml maestro-flows/a_first_open.yaml || true  # Continue even if tests fail
            
            # Verify test results were generated
            echo "Verifying test results..."
            ls -la allure-results/
     
      # Generate Allure HTML dashboard
      - name: Generate Allure report
        if: always()  # Run this step even if previous steps failed
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing contents:"
          ls -la
          echo "Generating Allure report..."
          allure generate allure-results --clean -o allure-report
          echo "Verifying report generation..."
          ls -la allure-report/

      # Deploy the dashboard to gh-pages
      - name: Deploy Allure Dashboard to GitHub Pages
        if: always()  # Run this step even if previous steps failed
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report  # Updated path
          commit_message: "Update Allure Report $(date +'%Y-%m-%d %H:%M:%S')"
          force_orphan: true  # Clean up the branch on each deployment
