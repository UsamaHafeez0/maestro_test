name: Maestro Tests on Existing APK

on:
    push:
      tags:
        - '*-TT'  

jobs:
  test:
    runs-on: macos-13
    timeout-minutes: 30  # Reduced timeout since we're not building
    
    env:
      GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure Git for private packages
        run: |
          git config --global url."https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_TOKEN }}@github.com/".insteadOf "https://github.com/"
    
      # Install Maestro CLI
      - name: Install Maestro
        run: curl -Ls "https://get.maestro.mobile.dev" | bash 
        
      - name: Add Maestro to PATH
        run: echo "$HOME/.maestro/bin" >> $GITHUB_PATH
        
      - name: Verify Maestro installation
        run: maestro --version

      # Set up Java 17 for Android SDK and emulator
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # Install Allure for reporting
      - name: Install Allure CLI
        run: npm install -g allure-commandline@2.24.1

      # Verify APK exists
      - name: Verify APK exists
        run: |
          if [ ! -f "maestro-flows/drops.apk" ]; then
            echo "Error: drops.apk not found in maestro-flows directory"
            ls -la maestro-flows/
            exit 1
          else
            echo "Found drops.apk in maestro-flows directory"
            ls -la maestro-flows/drops.apk
          fi

      # Launch emulator, install APK, and run Maestro tests
      - name: Run Emulator, Install APK & Maestro Flows
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29  # Using a more stable API level
          arch: x86_64
          target: google_apis
          profile: pixel_7  # Using Pixel 7 device profile
          disable-animations: true
          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          avd-name: test-emulator
          force-avd-creation: true
          emulator-boot-timeout: 900  # Increased to 15 minutes
          disable-spellchecker: true
          script: |
            echo "Emulator is running..."
            
            # Wait for emulator to be fully booted
            echo "Waiting for emulator to be fully booted..."
            adb wait-for-device
            sleep 30  # Additional wait time for system services
            
            # Health check for emulator
            echo "Performing emulator health check..."
            adb shell getprop sys.boot_completed | grep 1 || (echo "Emulator not fully booted" && exit 1)
            adb shell pm list packages | grep -q "com.android.systemui" || (echo "System UI not ready" && exit 1)
            
            echo "ADB devices:"
            adb devices -l
            
            # Check APK file
            echo "Checking APK file..."
            ls -la maestro-flows/drops.apk
            echo "APK file size: $(stat -f%z maestro-flows/drops.apk) bytes"
            
            # Install APK with retry
            echo "Installing APK..."
            for i in {1..3}; do
              if adb install -r maestro-flows/drops.apk; then
                echo "APK installed successfully"
                break
              else
                echo "APK installation attempt $i failed, waiting before retry..."
                sleep 10
                if [ $i -eq 3 ]; then
                  echo "APK installation failed after 3 attempts"
                  exit 1
                fi
              fi
            done
            
            # Create results directory
            echo "Creating results directory..."
            mkdir -p allure-results
            
            # Check Maestro version
            echo "Checking Maestro version..."
            maestro --version
            
            # List Maestro flows
            echo "Listing Maestro flows..."
            ls -la maestro-flows/
            
            # Run Maestro tests with retry
            echo "Running Maestro tests..."
            for i in {1..3}; do
              echo "Attempt $i to run Maestro tests..."
              if maestro test --format junit --output allure-results/$(date +%s).xml maestro-flows/a_first_open.yaml; then
                echo "Maestro tests completed successfully"
                break
              else
                echo "Maestro test attempt $i failed, waiting before retry..."
                sleep 30
                if [ $i -eq 3 ]; then
                  echo "Maestro tests failed after 3 attempts"
                  exit 1
                fi
              fi
            done
            
            # Check for test results
            echo "Checking for test results..."
            ls -la allure-results/ || echo "No test results found"
            
            echo "Tests completed successfully"
     
      # Generate Allure HTML dashboard
      - name: Generate Allure report
        run: |
          allure generate --clean    # outputs to ./allure-report by default

      # Deploy the dashboard to gh-pages
      - name: Deploy Allure Dashboard to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-report
          keep_files: false
