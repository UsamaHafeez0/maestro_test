name: Maestro Tests on Existing APK

on:
    push:
      tags:
        - '*-TT'  

jobs:
  test:
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        
      # Install Maestro CLI
      - name: Install Maestro
        run: curl -Ls "https://get.maestro.mobile.dev" | bash 
        
      - name: Add Maestro to PATH
        run: echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      # Install Allure for reporting
      - name: Install Allure CLI
        run: npm install -g allure-commandline@2.24.1

      # Verify APK exists
      - name: Verify APK exists
        run: |
          if [ ! -f "maestro-flows/drops.apk" ]; then
            echo "Error: drops.apk not found in maestro-flows directory"
            exit 1
          fi

      # Launch emulator and run Maestro tests
      - name: Run Emulator & Maestro Tests
        uses: reactivecircus/android-emulator-runner@v2
        continue-on-error: true  # Continue even if tests fail
        with:
          api-level: 29
          arch: x86_64
          target: google_apis
          profile: pixel_7
          disable-animations: true
          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          avd-name: test-emulator
          force-avd-creation: true
          emulator-boot-timeout: 900
          script: |
            # Wait for emulator to be ready
            adb wait-for-device
            
            # Verify emulator is fully booted
            adb shell getprop sys.boot_completed | grep 1 || exit 1
            
            # Install APK
            adb install -r maestro-flows/drops.apk || exit 1
            
            # Launch the app to ensure it's ready
            adb shell monkey -p com.example.maestro_demo -c android.intent.category.LAUNCHER 1
            sleep 5
            
            # Create results directory
            mkdir -p allure-results
            
            # Run Maestro tests
            maestro test --format junit --output allure-results/$(date +%s).xml maestro-flows/a_first_open.yaml || true  # Continue even if tests fail
            
            # Verify test results were generated
            echo "Verifying test results..."
            ls -la allure-results/
     
      # Generate Allure HTML dashboard
      - name: Generate Allure report
        if: always()  # Run this step even if previous steps failed
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing contents:"
          ls -la
          echo "Generating Allure report..."
          allure generate allure-results --clean -o allure-report
          echo "Verifying report generation..."
          ls -la allure-report/

      # Deploy the dashboard to gh-pages
      - name: Deploy Allure Dashboard to GitHub Pages
        if: always()  # Run this step even if previous steps failed
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report  # Updated path
          commit_message: "Update Allure Report $(date +'%Y-%m-%d %H:%M:%S')"
          force_orphan: true  # Clean up the branch on each deployment
